// Felix, Eric Donner
// 2024/05/30
// Easy Track Inventory Application
// Remove window

package easytrack;

import java.util.ArrayList;
import javax.swing.JOptionPane;

public class EasyTrackRemove extends javax.swing.JFrame {
    
    EasyTrackMainMenu EasyTrackMainMenu; // main menu class
    
    // getting arraylist objects from main menu when they are loaded
    ArrayList<Hardware> inventory = EasyTrackMainMenu.getInventory();
    ArrayList<Hardware> monitors = EasyTrackMainMenu.getMonitors();
    ArrayList<Hardware> firewalls = EasyTrackMainMenu.getFirewalls();
    ArrayList<Hardware> desktops = EasyTrackMainMenu.getDesktops();
    ArrayList<Hardware> laptops = EasyTrackMainMenu.getLaptops();
    ArrayList<Hardware> networkSwitch = EasyTrackMainMenu.getNetworkSwitch();
    ArrayList<Hardware> fiberSwitch = EasyTrackMainMenu.getFiberSwitch();
    ArrayList<Hardware> printers = EasyTrackMainMenu.getPrinters();
    ArrayList<Hardware> san = EasyTrackMainMenu.getSan();
    ArrayList<Hardware> scanners = EasyTrackMainMenu.getScanners();
    ArrayList<Hardware> servers = EasyTrackMainMenu.getServers();
    ArrayList<Hardware> tapeDrive = EasyTrackMainMenu.getTapeDrive();
    ArrayList<Hardware> thinClients = EasyTrackMainMenu.getThinClients();
    ArrayList<Hardware> timeClock = EasyTrackMainMenu.getTimeClocks();
    ArrayList<Hardware> ups = EasyTrackMainMenu.getUps();
    ArrayList<Hardware> waps = EasyTrackMainMenu.getWap();
    
    int searchAssetNumber; // the asset number of the object that is going to be removed
    int searchHardwareType; // the hardware type of the object
    
    // the piece of hardware that is being removed from the list
    Hardware hardwareToRemove = new Hardware();
    
    int hardwareToRemoveInvetoryIndex; // the index of the object in the inventory array list
    int hardwareToRemoveHardwareTypeIndex; // the index of the object in its own hardware type array list

    /**
     * Creates new form EasyTrackRemove
     */
    public EasyTrackRemove(EasyTrackMainMenu m) {
        initComponents();
        EasyTrackMainMenu = m;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backButton = new javax.swing.JButton();
        removeTitleLabel = new javax.swing.JLabel();
        assetNumberLabel = new javax.swing.JLabel();
        assetNumberTextField = new javax.swing.JTextField();
        itemLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        itemTextArea = new javax.swing.JTextArea();
        removeButton = new javax.swing.JButton();
        findButton = new javax.swing.JButton();
        hardwareTypeComboBox = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1200, 700));
        setMinimumSize(new java.awt.Dimension(1200, 700));
        setPreferredSize(new java.awt.Dimension(1200, 700));

        backButton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        backButton.setText("Return to Menu");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        removeTitleLabel.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        removeTitleLabel.setText("Remove Item from Inventory");

        assetNumberLabel.setText("Item Asset Number:");

        assetNumberTextField.setMaximumSize(new java.awt.Dimension(123, 22));
        assetNumberTextField.setMinimumSize(new java.awt.Dimension(123, 22));
        assetNumberTextField.setPreferredSize(new java.awt.Dimension(123, 22));

        itemLabel.setText("Item:");

        itemTextArea.setColumns(20);
        itemTextArea.setRows(5);
        jScrollPane1.setViewportView(itemTextArea);

        removeButton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        removeButton.setText("Remove Item");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        findButton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        findButton.setText("Find Item");
        findButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findButtonActionPerformed(evt);
            }
        });

        hardwareTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Server", "Desktop", "Laptop", "Thin Client", "Monitor", "Firewall", "Wireless Access Point", "Network Switch", "UPS", "Printer/Copier", "Scanner", "Timeclock", "Tape Drive", "SAN", "Fiber Switch" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(itemLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(removeTitleLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(assetNumberLabel)
                                .addGap(18, 18, 18)
                                .addComponent(assetNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(91, 91, 91)
                                .addComponent(hardwareTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 111, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(backButton)
                                .addGap(51, 51, 51))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(removeButton)
                                .addGap(64, 64, 64))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(findButton)
                                .addGap(81, 81, 81))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(removeTitleLabel)
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assetNumberLabel)
                    .addComponent(assetNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hardwareTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(itemLabel)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(findButton)
                        .addGap(26, 26, 26)
                        .addComponent(removeButton)
                        .addGap(28, 28, 28)
                        .addComponent(backButton)
                        .addGap(62, 62, 62))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 432, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(72, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // go back to main menu
    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        EasyTrackMainMenu.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_backButtonActionPerformed

    // when find button is clicked
    private void findButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findButtonActionPerformed
        searchAssetNumber = Integer.parseInt(assetNumberTextField.getText()); // get the asset number from the user and GUI
        searchHardwareType = hardwareTypeComboBox.getSelectedIndex(); // the hardware type of the object from the user and GUI
        
        // check if asset number has a valid size, then search
        if (searchAssetNumber > inventory.size()) {
            // display error message to user
            JOptionPane.showMessageDialog(null, "Please enter a valid asset number. The largest asset number in the system is: " + inventory.size());
        } else {
            // search for the object based on asset number in the inventory array list
            for (int i = 0; i < inventory.size(); i++) {
                if (inventory.get(i).getAssetNumber() == searchAssetNumber) {
                    hardwareToRemove = inventory.get(i); // get object to remove from array list
                    hardwareToRemoveInvetoryIndex = inventory.indexOf(inventory.get(i)); // get the index of the object in the inventory array list
                    itemTextArea.setText(hardwareToRemove.toString()); // display object attributes to user in the text area
                }
            }
        }
        
        // search other array lists to find the object
        if (searchHardwareType == 0) { // search server array list
            // loop through array list and get index where the objects match
            for (int i = 0; i < servers.size(); i++) {
                if (hardwareToRemove.equals(servers.get(i))) {
                    hardwareToRemoveHardwareTypeIndex = servers.indexOf(servers.get(i));
                }
            }
        } else if (searchHardwareType == 1) { // search desktop array list
            // loop through array list and get index where the objects match
            for (int i = 0; i < desktops.size(); i++) {
                if (hardwareToRemove.equals(desktops.get(i))) {
                    hardwareToRemoveHardwareTypeIndex = desktops.indexOf(desktops.get(i));
                }
            }
        } else if (searchHardwareType == 2) { // search laptop array list
            // loop through array list and get index where the objects match
            for (int i = 0; i < laptops.size(); i++) {
                if (hardwareToRemove.equals(laptops.get(i))) {
                    hardwareToRemoveHardwareTypeIndex = laptops.indexOf(laptops.get(i));
                }
            }
        } else if (searchHardwareType == 3) { // search thin client array list
            // loop through array list and get index where the objects match
            for (int i = 0; i < thinClients.size(); i++) {
                if (hardwareToRemove.equals(thinClients.get(i))) {
                    hardwareToRemoveHardwareTypeIndex = thinClients.indexOf(thinClients.get(i));
                }
            }
        } else if (searchHardwareType == 4) { // search monitor array list
            // loop through array list and get index where the objects match
            for (int i = 0; i < monitors.size(); i++) {
                if (hardwareToRemove.equals(monitors.get(i))) {
                    hardwareToRemoveHardwareTypeIndex = monitors.indexOf(monitors.get(i));
                }
            }
        } else if (searchHardwareType == 5) { // search firewall array list
            // loop through array list and get index where the objects match
            for (int i = 0; i < firewalls.size(); i++) {
                if (hardwareToRemove.equals(firewalls.get(i))) {
                    hardwareToRemoveHardwareTypeIndex = firewalls.indexOf(firewalls.get(i));
                }
            }
        } else if (searchHardwareType == 6) { // search wireless access point array list
            // loop through array list and get index where the objects match
            for (int i = 0; i < waps.size(); i++) {
                if (hardwareToRemove.equals(waps.get(i))) {
                    hardwareToRemoveHardwareTypeIndex = waps.indexOf(waps.get(i));
                }
            }
        } else if (searchHardwareType == 7) { // search network switch array list
            // loop through array list and get index where the objects match
            for (int i = 0; i < networkSwitch.size(); i++) {
                if (hardwareToRemove.equals(networkSwitch.get(i))) {
                    hardwareToRemoveHardwareTypeIndex = networkSwitch.indexOf(networkSwitch.get(i));
                }
            }
        } else if (searchHardwareType == 8) { // search ups array list
            // loop through array list and get index where the objects match
            for (int i = 0; i < ups.size(); i++) {
                if (hardwareToRemove.equals(ups.get(i))) {
                    hardwareToRemoveHardwareTypeIndex = ups.indexOf(ups.get(i));
                }
            }
        } else if (searchHardwareType == 9) { // search printer array list
            // loop through array list and get index where the objects match
            for (int i = 0; i < printers.size(); i++) {
                if (hardwareToRemove.equals(printers.get(i))) {
                    hardwareToRemoveHardwareTypeIndex = printers.indexOf(printers.get(i));
                }
            }
        } else if (searchHardwareType == 10) { // search scanner array list
            // loop through array list and get index where the objects match
            for (int i = 0; i < scanners.size(); i++) {
                if (hardwareToRemove.equals(scanners.get(i))) {
                    hardwareToRemoveHardwareTypeIndex = scanners.indexOf(scanners.get(i));
                }
            }
        } else if (searchHardwareType == 11) { // search time clock array list
            // loop through array list and get index where the objects match
            for (int i = 0; i < timeClock.size(); i++) {
                if (hardwareToRemove.equals(timeClock.get(i))) {
                    hardwareToRemoveHardwareTypeIndex = timeClock.indexOf(timeClock.get(i));
                }
            }
        } else if (searchHardwareType == 12) { // search tape drive array list
            // loop through array list and get index where the objects match
            for (int i = 0; i < tapeDrive.size(); i++) {
                if (hardwareToRemove.equals(tapeDrive.get(i))) {
                    hardwareToRemoveHardwareTypeIndex = tapeDrive.indexOf(tapeDrive.get(i));
                }
            }
        } else if (searchHardwareType == 13) { // search san array list
            // loop through array list and get index where the objects match
            for (int i = 0; i < san.size(); i++) {
                if (hardwareToRemove.equals(san.get(i))) {
                    hardwareToRemoveHardwareTypeIndex = san.indexOf(san.get(i));
                }
            }
        } else if (searchHardwareType == 14) { // search fiber switch array list
            // loop through array list and get index where the objects match
            for (int i = 0; i < fiberSwitch.size(); i++) {
                if (hardwareToRemove.equals(fiberSwitch.get(i))) {
                    hardwareToRemoveHardwareTypeIndex = fiberSwitch.indexOf(fiberSwitch.get(i));
                }
            }
        }
    }//GEN-LAST:event_findButtonActionPerformed

    // when remove button is clicked
    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        // remove object from inventory array list
        inventory.remove(hardwareToRemoveInvetoryIndex);
        
        // also remove object from its hardware type array list
        if (searchHardwareType == 0) { // remove from server array list
            servers.remove(hardwareToRemoveHardwareTypeIndex);
        } else if (searchHardwareType == 1) { // remove from desktop array list
            desktops.remove(hardwareToRemoveHardwareTypeIndex);
        } else if (searchHardwareType == 2) { // remove from laptop array list
            laptops.remove(hardwareToRemoveHardwareTypeIndex);
        } else if (searchHardwareType == 3) { // remove from thin client array list
            thinClients.remove(hardwareToRemoveHardwareTypeIndex);
        } else if (searchHardwareType == 4) { // remove from monitor array list
            monitors.remove(hardwareToRemoveHardwareTypeIndex);
        } else if (searchHardwareType == 5) { // remove from firewall array list
            firewalls.remove(hardwareToRemoveHardwareTypeIndex);
        } else if (searchHardwareType == 6) { // remove from wireless access point array list
            waps.remove(hardwareToRemoveHardwareTypeIndex);
        } else if (searchHardwareType == 7) { // remove from network switch array list
            networkSwitch.remove(hardwareToRemoveHardwareTypeIndex);
        } else if (searchHardwareType == 8) { // remove from ups array list
            ups.remove(hardwareToRemoveHardwareTypeIndex);
        } else if (searchHardwareType == 9) { // remove from printer array list
            printers.remove(hardwareToRemoveHardwareTypeIndex);
        } else if (searchHardwareType == 10) { // remove from scanner array list
            scanners.remove(hardwareToRemoveHardwareTypeIndex);
        } else if (searchHardwareType == 11) { // remove from time clock array list
            timeClock.remove(hardwareToRemoveHardwareTypeIndex);
        } else if (searchHardwareType == 12) { // remove from tape drive array list
            tapeDrive.remove(hardwareToRemoveHardwareTypeIndex);
        } else if (searchHardwareType == 13) { // remove from san array list
            san.remove(hardwareToRemoveHardwareTypeIndex);
        } else if (searchHardwareType == 14) { // remove from fiber switch array list
            fiberSwitch.remove(hardwareToRemoveHardwareTypeIndex);
        }
    }//GEN-LAST:event_removeButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel assetNumberLabel;
    private javax.swing.JTextField assetNumberTextField;
    private javax.swing.JButton backButton;
    private javax.swing.JButton findButton;
    private javax.swing.JComboBox<String> hardwareTypeComboBox;
    private javax.swing.JLabel itemLabel;
    private javax.swing.JTextArea itemTextArea;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton removeButton;
    private javax.swing.JLabel removeTitleLabel;
    // End of variables declaration//GEN-END:variables
}
