// Felix, Eric Donner
// 2024/05/30
// Easy Track Inventory Application
// Search Window

package easytrack;

import java.util.ArrayList;

public class EasyTrackSearch extends javax.swing.JFrame {
    
    EasyTrackMainMenu EasyTrackMainMenu;
    
    /**
     * Creates new form EasyTrackView
     */
    public EasyTrackSearch(EasyTrackMainMenu m) {
        initComponents();
        EasyTrackMainMenu = m;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        backButton = new javax.swing.JButton();
        searchTitleLabel = new javax.swing.JLabel();
        hardwareTypeComboBox = new javax.swing.JComboBox<>();
        locationComboBox = new javax.swing.JComboBox<>();
        searchLabel = new javax.swing.JLabel();
        serialNumberButton = new javax.swing.JRadioButton();
        assetNumberButton = new javax.swing.JRadioButton();
        modelRadioButton = new javax.swing.JRadioButton();
        searchResultsLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultsTextArea = new javax.swing.JTextArea();
        searchBarTextField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1200, 700));
        setMinimumSize(new java.awt.Dimension(1200, 700));

        backButton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        backButton.setText("Return to Menu");
        backButton.setActionCommand("");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        searchTitleLabel.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        searchTitleLabel.setText("Search Inventory");

        hardwareTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Server", "Desktop", "Laptop", "Thin Client", "Monitor", "Firewall", "Wireless Access Point", "Network Switch", "UPS", "Printer/Copier", "Scanner", "Timeclock", "Tape Drive", "SAN", "Fiber Switch" }));

        locationComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Mid-Range", "Toronto", "St. John's", "Montreal", "Calgary", "Winnipeg", "Surrey", "IT Storage", "Employee's Home" }));

        searchLabel.setText("Search by:");

        buttonGroup1.add(serialNumberButton);
        serialNumberButton.setText("Serial Number");
        serialNumberButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serialNumberButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(assetNumberButton);
        assetNumberButton.setText("Asset Number");

        buttonGroup1.add(modelRadioButton);
        modelRadioButton.setText("Model");

        searchResultsLabel.setText("Search Results:");

        resultsTextArea.setColumns(20);
        resultsTextArea.setRows(5);
        jScrollPane1.setViewportView(resultsTextArea);

        searchBarTextField.setMaximumSize(new java.awt.Dimension(289, 22));
        searchBarTextField.setMinimumSize(new java.awt.Dimension(289, 22));
        searchBarTextField.setPreferredSize(new java.awt.Dimension(289, 22));

        searchButton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(81, 81, 81)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchTitleLabel)
                    .addComponent(hardwareTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(locationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchLabel)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(searchBarTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(serialNumberButton)
                            .addGap(40, 40, 40)
                            .addComponent(assetNumberButton, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(modelRadioButton))))
                .addGap(158, 158, 158)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchResultsLabel)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(50, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(searchButton)
                .addGap(193, 193, 193)
                .addComponent(backButton)
                .addGap(273, 273, 273))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(searchTitleLabel)
                        .addGap(65, 65, 65)
                        .addComponent(hardwareTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(61, 61, 61)
                        .addComponent(locationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(75, 75, 75)
                        .addComponent(searchLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(serialNumberButton)
                            .addComponent(assetNumberButton)
                            .addComponent(modelRadioButton))
                        .addGap(18, 18, 18)
                        .addComponent(searchBarTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addComponent(searchResultsLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 84, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backButton)
                    .addComponent(searchButton))
                .addGap(33, 33, 33))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void serialNumberButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serialNumberButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_serialNumberButtonActionPerformed
    /**
     * Search by serial number
     * @param serialNumber-serial number
     * @param location-location
     * @param list=array list of hardware objects
     * @return - string with the found object
     */
    public static String searchSerialNumber(String serialNumber,int location,ArrayList<Hardware> list){
        String serialNumber1;
        String output="";
        int location1;
        boolean unfound=true;
        int index=0;
        while(unfound){//while object is not found
            //get location of object at index from list
            location1=list.get(index).getLocation();
            if(location1==location){
                //if locations match
                //get serial number of object at index from list
                serialNumber1=list.get(index).getSerialNumber();
                //if serial numbers match
                if(serialNumber1.equals(serialNumber)){
                    //at the objects to string to output
                    output=list.get(index).toString();
                    unfound=false;//end loop
                }
            }
            //if index is larger than list size
            if(index>list.size()){
                //state hardware object could not be found
                output="Hardware not found, try searching with a different indicator.";
                unfound=false;//end loop
            }
            //add to index
            index++;
        }
        //return output
        return output;
    }
    /**
     * Search based on asset number
     * @param assetNum - asset number
     * @param location - location
     * @param list - array list of hardware
     * @return - String of hardware object that matches the search
     */
    public static String searchAssetNumber(int assetNum,int location,ArrayList<Hardware> list){
        int assetNum1;
        String output="";
        int location1;
        boolean unfound=true;
        int index=0;
        //while the object is not found
        while(unfound){
            //get location of hardware object at index
            location1=list.get(index).getLocation();
            if(location1==location){
                //if locations match
                //get the asset number of the hardware object at index
                assetNum1=list.get(index).getAssetNumber();
                if(assetNum1==assetNum){//if asset numbers match
                    //add objects to string to output
                    output=list.get(index).toString();
                    unfound=false;//object is found
                }
            }
            //if index is larger than list size
            if(index>list.size()){
                //state the hardware could not be found
                output="Hardware not found, try searching with a different indicator.";
                unfound=false;//unfound=false
            }
            //add to index
            index++;
        }
        //return output
        return output;
    }
    /**
     * Search based on model
     * @param model - model
     * @param location - location 
     * @param list - array list of hardware
     * @return - String of hardware object that matches the search
     */
    public static String searchModel(String model,int location,ArrayList<Hardware> list){
        String model1;
        String output="";
        int location1;
        boolean unfound=true;
        int index=0;
        while(unfound){//while the object is not found
            //get location of hardware object at index of the list
            location1=list.get(index).getLocation();
            if(location1==location){
                //if locations match
                //get model of the object at index
                model1=list.get(index).getModel();
                if(model1.equals(model)){//if models match
                    //add the objexts to string to the output
                    output=list.get(index).toString();
                    unfound=false;//object is found
                }
            }
            //if the index is larger than the list given
            if(index>list.size()){
                //output states hardware object was not found
                output="Hardware not found, try searching with a different indicator.";
                unfound=false;//object is found
            }
            //add to index
            index++;
        }
        //return output
        return output;
    }
    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        //get selected index of location combo box
        int location=locationComboBox.getSelectedIndex();
        //get selected index of hardware type combo box
        int type = hardwareTypeComboBox.getSelectedIndex();
        //get the identification used to search items
        String id=searchBarTextField.getText();
        ArrayList<Hardware> list;
        //assign an array list based on the type selected
        if(type==0){
            list=EasyTrackMainMenu.getServers();
        }else if(type==1){
            list=EasyTrackMainMenu.getDesktops();
        }else if(type==2){
            list=EasyTrackMainMenu.getLaptops();
        }else if(type==3){
            list=EasyTrackMainMenu.getThinClients();
        }else if(type==4){
            list=EasyTrackMainMenu.getMonitors();
        }else if(type==5){
            list=EasyTrackMainMenu.getFirewalls();
        }else if(type==6){
            list=EasyTrackMainMenu.getWap();
        }else if(type==7){
            list=EasyTrackMainMenu.getNetworkSwitch();
        }else if(type==8){
            list=EasyTrackMainMenu.getUps();
        }else if(type==9){
            list=EasyTrackMainMenu.getPrinters();
        }else if(type==10){
            list=EasyTrackMainMenu.getScanners();
        }else if(type==11){
            list=EasyTrackMainMenu.getTimeClocks();
        }else if(type==12){
            list=EasyTrackMainMenu.getTapeDrive();
        }else if(type==13){
            list=EasyTrackMainMenu.getSan();
        }else{
            list=EasyTrackMainMenu.getFiberSwitch();
        }
        //if asset number is selected
        if(assetNumberButton.isSelected()){
            //search by asset number
            int num=Integer.parseInt(id);
            resultsTextArea.setText(searchAssetNumber(num,location,list));
        }else if(serialNumberButton.isSelected()){//if serial number is selected
            //search by serial num
            resultsTextArea.setText(searchSerialNumber(id,location,list));
        }else{//if model is selected
            //search by model
            resultsTextArea.setText(searchModel(id,location,list));
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        EasyTrackMainMenu.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_backButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton assetNumberButton;
    private javax.swing.JButton backButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> hardwareTypeComboBox;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> locationComboBox;
    private javax.swing.JRadioButton modelRadioButton;
    private javax.swing.JTextArea resultsTextArea;
    private javax.swing.JTextField searchBarTextField;
    private javax.swing.JButton searchButton;
    private javax.swing.JLabel searchLabel;
    private javax.swing.JLabel searchResultsLabel;
    private javax.swing.JLabel searchTitleLabel;
    private javax.swing.JRadioButton serialNumberButton;
    // End of variables declaration//GEN-END:variables
}
